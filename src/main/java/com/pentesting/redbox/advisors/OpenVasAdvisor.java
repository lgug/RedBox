package com.pentesting.redbox.advisors;

import com.pentesting.redbox.utils.ListsManager;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

public class OpenVasAdvisor implements Advisor {

    @Override
    public AdvisorBean processLists(List<String> successfulLines, List<String> errorLines) {
        return null;
    }

    @Override
    public List<String> getErrorStrings(List<String> outputLines) {
        String xml;
        if (outputLines.size() != 1) xml = ListsManager.fromListToString(outputLines, '\n');
        else xml = outputLines.get(0);

        try {
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newDefaultInstance();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            Document document = documentBuilder.parse(new InputSource(new StringReader(xml)));
            Integer status = Integer.parseInt(document.getDocumentElement().getAttribute("status"));
            if (status >= 200 && status <= 299) {
                return outputLines;
            } else {
                return new ArrayList<>();
            }

        } catch (ParserConfigurationException | IOException | SAXException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public List<String> getWarningStrings(List<String> outputLines) {
        return new ArrayList<>();
    }

    @Override
    public List<String> getSuccessfulStrings(List<String> outputLines) {
        String xml;
        if (outputLines.size() != 1) xml = ListsManager.fromListToString(outputLines, '\n');
        else xml = outputLines.get(0);

        try {
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newDefaultInstance();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            Document document = documentBuilder.parse(new InputSource(new StringReader(xml)));
            Integer status = Integer.parseInt(document.getDocumentElement().getAttribute("status"));
            if (status >= 400 && status <= 599) {
                return outputLines;
            } else {
                return new ArrayList<>();
            }

        } catch (ParserConfigurationException | IOException | SAXException e) {
            e.printStackTrace();
        }
        return null;
    }
}
