package com.pentesting.redbox.service;

import com.pentesting.redbox.adapters.Ifconfig_OutputAdapter;
import com.pentesting.redbox.beans.NetInterface;
import com.pentesting.redbox.persistence.entities.Command;
import com.pentesting.redbox.persistence.entities.OutputCommand;
import com.pentesting.redbox.utils.exceptions.CannotAdaptCommandOutputException;
import com.pentesting.redbox.utils.exceptions.CommandExitWithErrorException;
import com.pentesting.redbox.utils.exceptions.ExecutionInterruptedException;
import com.pentesting.redbox.utils.exceptions.ProgramNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.List;

@Service
public class NetworkManagementServiceImpl implements NetworkManagementService {

    @Autowired
    private ExecuteCommandService executeCommandService;

    @Autowired
    private AdaptOutputService adaptOutputService;

    @Override
    public String getPublicIPAddress() throws IOException {
        String ip;
        URL myIp = new URL("http://checkip.amazonaws.com");
        BufferedReader in = new BufferedReader(new InputStreamReader(myIp.openStream()));
        ip = in.readLine();
        return ip;
    }

    @Override
    public String getPrivateIPAddress() throws CommandExitWithErrorException, ExecutionInterruptedException, ProgramNotFoundException, CannotAdaptCommandOutputException {
        List<NetInterface> netInterfaceList = getNetInterfaceList();
        for (NetInterface netInterface: netInterfaceList) {
            if (netInterface.getIpv4Address() != null && !netInterface.getName().equals("lo"))
                return netInterface.getIpv4Address();
        }
        return null;
    }

    @Override
    public String getMacAddress() throws CommandExitWithErrorException, ExecutionInterruptedException, ProgramNotFoundException, CannotAdaptCommandOutputException {
        List<NetInterface> netInterfaceList = getNetInterfaceList();
        for (NetInterface netInterface: netInterfaceList) {
            if (netInterface.getIpv4Address() != null && netInterface.getMacAddress() != null)
                return netInterface.getMacAddress();
        }
        return null;
    }

    @Override
    public boolean establishTorConnection() {
        return false;
    }

    private List<NetInterface> getNetInterfaceList() throws CommandExitWithErrorException, ExecutionInterruptedException, ProgramNotFoundException, CannotAdaptCommandOutputException {
        Command command = new Command("ifconfig", null);
        OutputCommand outputCommand = executeCommandService.execute(command, 1);
        return ((Ifconfig_OutputAdapter) adaptOutputService.adapt(outputCommand.getResultString(), command.getCommand()))
                .getInterfaceList();
    }
}
