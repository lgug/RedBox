package com.pentesting.redbox.service;

import com.pentesting.redbox.adapters.*;
import com.pentesting.redbox.utils.LogUtil;
import com.pentesting.redbox.utils.StringGetter;
import com.pentesting.redbox.utils.exceptions.CannotAdaptCommandOutputException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
public class AdaptOutputServiceImpl implements AdaptOutputService {

    private static final Logger log = LoggerFactory.getLogger(AdaptOutputServiceImpl.class);

    @Override
    public Fping_OutputAdapter adaptToFping(List<String> outputLines) {
        Fping_OutputAdapter fping_outputAdapter = new Fping_OutputAdapter();
        Pattern pattern = Pattern.compile("(.*)(( is ((alive)|(unreachable)))|(: Name or service not known))");
        Matcher matcher;
        for (String line: outputLines) {
            matcher = pattern.matcher(line);
            //log.info(String.valueOf(matcher.groupCount()));
            //LogUtil.printMatcherGroup(matcher);
            fping_outputAdapter.setHost(matcher.group(1));
            if (line.contains(matcher.group(3))) {
                fping_outputAdapter.setAlive(true);
                fping_outputAdapter.setExists(true);
            } else if (line.contains(matcher.group(6))) {
                fping_outputAdapter.setAlive(false);
                fping_outputAdapter.setExists(true);
            } else {
                fping_outputAdapter.setExists(false);
            }
        }
        return fping_outputAdapter;
    }

    @Override
    public Ifconfig_OutputAdapter adaptToIfconfig(List<String> outputLines) throws CannotAdaptCommandOutputException {
        Ifconfig_OutputAdapter ifconfig_outputAdapter = new Ifconfig_OutputAdapter();
        ifconfig_outputAdapter.setInterfaceList(new ArrayList<>());

        Pattern startInterfacePattern = Pattern.compile(".*\\s+Link encap:((Ethernet\\s((HWAddr)?\\s?[\\dabcdef])+)|(Local\\s+Loopback))");
        Pattern netAddressesPattern = Pattern.compile("\\s+(inet addr:([\\d.]{7,15}))?(\\s+Bcast:([\\d.]{7,15}))?(\\s+Mask:([\\d.]{7,15}))?\\s?");
        Pattern ipv6AddressPattern = Pattern.compile("\\s+(inet6 addr:\\s?([\\dabcdef:/]+))\\s+(Scope:\\s?([\\w]+))");

        boolean interfacePending = false;
        for (String line: outputLines) {
            NetInterface netInterface;
            if (startInterfacePattern.matcher(line).matches()) {
                LogUtil.printMatcherGroup(startInterfacePattern.matcher(line));
                interfacePending = true;
                netInterface = new NetInterface();
                netInterface.setName("");
            }
            if (interfacePending) {

            }
        }


        return null;
    }

    @Override
    public Macchanger_OutputAdapter adaptToMacchanger(List<String> outputLines) throws CannotAdaptCommandOutputException {
        Macchanger_OutputAdapter macchanger_outputAdapter = new Macchanger_OutputAdapter();

        String currentMacPattern = "Current MAC:[\\s]+.{17}[\\s]+\\(.*\\)";
        String permanentMacPattern = "Permanent MAC:[\\s]+.{17}[\\s]+\\(.*\\)";
        String newMacPattern = "New MAC:[\\s]+.{17}[\\s]+\\(.*\\)";

        for (String line: outputLines) {
            if (line.matches(currentMacPattern)) {
                macchanger_outputAdapter.setCurrentMac(StringGetter.getMACAddress(line));
            } else if (line.matches(permanentMacPattern)){
                macchanger_outputAdapter.setPermanentMac(StringGetter.getMACAddress(line));
            } else if (line.matches(newMacPattern)){
                macchanger_outputAdapter.setNewMac(StringGetter.getMACAddress(line));
            } else {
                throw new CannotAdaptCommandOutputException();
            }
        }
        return macchanger_outputAdapter;
    }

    @Override
    public NMAP_OutputAdapter adaptToNMAP(List<String> outputLines) throws CannotAdaptCommandOutputException {
        return null;
    }
}
