package com.pentesting.redbox.service;

import com.pentesting.redbox.adapters.Fping_OutputAdapter;
import com.pentesting.redbox.adapters.Ifconfig_OutputAdapter;
import com.pentesting.redbox.adapters.Macchanger_OutputAdapter;
import com.pentesting.redbox.adapters.NMAP_OutputAdapter;
import com.pentesting.redbox.utils.StringGetter;
import com.pentesting.redbox.utils.exceptions.CannotAdaptCommandOutputException;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.regex.Pattern;

@Service
public class AdaptOutputServiceImpl implements AdaptOutputService {

    @Override
    public Fping_OutputAdapter adaptToFping(List<String> outputLines) {
        Fping_OutputAdapter fping_outputAdapter = new Fping_OutputAdapter();
        for (String line: outputLines) {
            if (line.matches(".* is alive|unreachable|"));
                //...
        }
        return null;
    }

    @Override
    public Ifconfig_OutputAdapter adaptToIfconfig(List<String> outputLines) throws CannotAdaptCommandOutputException {
        Ifconfig_OutputAdapter ifconfig_outputAdapter = new Ifconfig_OutputAdapter();
        Pattern pattern = Pattern.compile(".*\\s+Link encap:(Ethernet|Local).*");
        Pattern macAddressPattern = Pattern.compile("(HWAddr)?\\s?[\\dabcdef]+");
        for (String line: outputLines) {
            //...
        }


        return null;
    }

    @Override
    public Macchanger_OutputAdapter adaptToMacchanger(List<String> outputLines) throws CannotAdaptCommandOutputException {
        Macchanger_OutputAdapter macchanger_outputAdapter = new Macchanger_OutputAdapter();

        String currentMacPattern = "Current MAC:[\\s]+.{17}[\\s]+\\(.*\\)";
        String permanentMacPattern = "Permanent MAC:[\\s]+.{17}[\\s]+\\(.*\\)";
        String newMacPattern = "New MAC:[\\s]+.{17}[\\s]+\\(.*\\)";

        for (String line: outputLines) {
            if (line.matches(currentMacPattern)) {
                macchanger_outputAdapter.setCurrentMac(StringGetter.getMACAddress(line));
            } else if (line.matches(permanentMacPattern)){
                macchanger_outputAdapter.setPermanentMac(StringGetter.getMACAddress(line));
            } else if (line.matches(newMacPattern)){
                macchanger_outputAdapter.setNewMac(StringGetter.getMACAddress(line));
            } else {
                throw new CannotAdaptCommandOutputException();
            }
        }
        return macchanger_outputAdapter;
    }

    @Override
    public NMAP_OutputAdapter adaptToNMAP(List<String> outputLines) throws CannotAdaptCommandOutputException {
        return null;
    }
}
