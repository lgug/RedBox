package com.pentesting.redbox.service;

import com.pentesting.redbox.persistence.entities.Command;
import com.pentesting.redbox.persistence.entities.OutputCommand;
import com.pentesting.redbox.utils.ExecutionManager;
import com.pentesting.redbox.utils.exceptions.CommandExitWithErrorException;
import com.pentesting.redbox.utils.exceptions.ProgramNotFoundException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class ExecuteCommandServiceImpl implements ExecuteCommandService {

    private static final Logger log = LoggerFactory.getLogger(ExecuteCommandServiceImpl.class);

    @SuppressWarnings({"LoopStatementThatDoesntLoop", "UnusedAssignment"})
    @Override
    public OutputCommand execute(Command command, Integer times) throws ProgramNotFoundException, CommandExitWithErrorException {
        List<OutputCommand> outputCommandList = new ArrayList<>();
        OutputCommand outputCommand;
        for (int i = 0; i < times; i++) {
            outputCommand = ExecutionManager.execute(command);
            switch (outputCommand.getOutputStatus()) {
                case NOT_FOUND:
                    throw new ProgramNotFoundException();
                case NULL:
                    //...
                    return null;
                case ERROR:
                    throw new CommandExitWithErrorException(outputCommand.getResultString());
                case SUCCESS:
                    log.info("SUCCESS of COMMAND: " + outputCommand.getCommand().getFullCommand());
                    outputCommandList.add(outputCommand);
                    break;
                default:
                    return null;
            }
        }

        OutputCommand bestObject = outputCommandList.get(0);
        for (OutputCommand o: outputCommandList) {
            if (o.compareTo(bestObject) > 0) {
                bestObject = o;
            }
        }
        return bestObject;
    }

}
