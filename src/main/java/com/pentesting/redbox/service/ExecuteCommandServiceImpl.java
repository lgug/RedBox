package com.pentesting.redbox.service;

import com.pentesting.redbox.advisors.*;
import com.pentesting.redbox.makers.GenericMaker;
import com.pentesting.redbox.makers.Maker;
import com.pentesting.redbox.makers.MetasploitMaker;
import com.pentesting.redbox.persistence.entities.Command;
import com.pentesting.redbox.persistence.entities.OutputCommand;
import com.pentesting.redbox.utils.ExecutionManager;
import com.pentesting.redbox.utils.exceptions.CommandExitWithErrorException;
import com.pentesting.redbox.utils.exceptions.ExecutionInterruptedException;
import com.pentesting.redbox.utils.exceptions.ProgramNotFoundException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class ExecuteCommandServiceImpl implements ExecuteCommandService {

    private static final Logger log = LoggerFactory.getLogger(ExecuteCommandServiceImpl.class);

    @Override
    public OutputCommand execute(Command command, Integer times) throws ProgramNotFoundException, CommandExitWithErrorException, ExecutionInterruptedException {
        Maker maker;
        Advisor advisor;
        switch (command.getCommand()) {
            case "msfconsole":
                maker = new MetasploitMaker();
                advisor = new MetasploitAdvisor();
                break;
            case "omp":
                maker = new GenericMaker();
                advisor = new OpenVASAdvisor();
                break;
            case "lsb_release":
                maker = new GenericMaker();
                advisor = new Lsb_releaseAdvisor();
                break;
            default:
                maker = new GenericMaker();
                advisor = new GenericAdvisor();
        }

        List<OutputCommand> outputCommandList = new ArrayList<>();
        OutputCommand outputCommand;
        for (int i = 0; i < times; i++) {
            outputCommand = ExecutionManager.execute(command, maker, advisor);
            switch (outputCommand.getOutputStatus()) {
                case NOT_FOUND:
                    throw new ProgramNotFoundException();
                case INTERRUPTED:
                    throw new ExecutionInterruptedException(outputCommand.getResultString());
                case ERROR:
                    throw new CommandExitWithErrorException(outputCommand.getResultString());
                case SUCCESS:
                    log.info("SUCCESS of COMMAND: " + outputCommand.getCommand().getFullCommand());
                    outputCommandList.add(outputCommand);
                    break;
            }
        }

        OutputCommand bestObject = outputCommandList.get(0);
        for (OutputCommand o: outputCommandList) {
            if (o.compareTo(bestObject) > 0) {
                bestObject = o;
            }
        }
        return bestObject;
    }

}
