package com.pentesting.redbox.service;

import com.pentesting.redbox.persistence.entities.Command;
import com.pentesting.redbox.persistence.entities.OutputCommand;
import com.pentesting.redbox.utils.ExecutionManager;
import com.pentesting.redbox.utils.StringGetter;
import com.pentesting.redbox.utils.exceptions.SystemCommandException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.Date;

import static com.pentesting.redbox.utils.OutputStatus.SUCCESS;

@Service
public class SystemServiceImpl implements SystemService {

    private static final Logger log = LoggerFactory.getLogger(ExecuteCommandServiceImpl.class);

    @Override
    public String setLangToEnglish() throws SystemCommandException {
        String currentLang, currentLanguage;
        String englishLang = "en_US.UTF-8";
        String englishLanguage = "en";

        currentLang = ExecutionManager.getEnvironmentVariable("LANG");
        currentLanguage = ExecutionManager.getEnvironmentVariable("LANGUAGE");

        try {
            ExecutionManager.setEnvironmentVariable("LANG", englishLang);
            ExecutionManager.setEnvironmentVariable("LANGUAGE", englishLanguage);
            ExecutionManager.setEnvironmentVariable("GDM_LANG", englishLanguage);
        } catch (Exception e) {
            e.printStackTrace();
            throw new SystemCommandException(e.getMessage());
        }

        return currentLang + " " + currentLanguage;
    }

    @Override
    public void setLangToDefault(String defaultLangPattern) throws SystemCommandException {
        String[] langs = defaultLangPattern.split(" ");

        try {
            ExecutionManager.setEnvironmentVariable("LANG", langs[0]);
            ExecutionManager.setEnvironmentVariable("LANGUAGE", langs[1]);
            ExecutionManager.setEnvironmentVariable("GDM_LANG", langs[1]);
        } catch (Exception e) {
            throw new SystemCommandException(e.getMessage());
        }
    }

    @Override
    public boolean getRootAuthorization(String password) {
        Command command = new Command(new Date(), "sudo", Collections.singletonList("-i"));
        OutputCommand o = ExecutionManager.execute(command, password);
        ExecutionManager.execute(new Command("whoami", null));
        return false; //provvisorio
    }
}
