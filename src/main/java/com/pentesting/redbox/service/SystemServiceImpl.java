package com.pentesting.redbox.service;

import com.pentesting.redbox.persistence.entities.Command;
import com.pentesting.redbox.persistence.entities.OutputCommand;
import com.pentesting.redbox.utils.Execution;
import com.pentesting.redbox.utils.StringGetter;
import com.pentesting.redbox.utils.exceptions.SystemCommandException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.Date;

import static com.pentesting.redbox.utils.OutputStatus.SUCCESS;

@Service
public class SystemServiceImpl implements SystemService {

    private static final Logger log = LoggerFactory.getLogger(ExecuteCommandServiceImpl.class);

    @Override
    public String setLangToEnglish() throws SystemCommandException {
        Command getCurrentLang = new Command("echo", Collections.singletonList("$LANG"));
        Command getCurrentLanguage = new Command("echo", Collections.singletonList("$LANGUAGE"));
        Command setEnglishLang = new Command("export", Collections.singletonList("LANG=en_US.UTF-8"));
        Command setEnglishLanguage = new Command("export", Collections.singletonList("LANGUAGE=en"));

        String currentLang = Execution.execute(getCurrentLang).getResultString().get(0);
        String currentLanguage = Execution.execute(getCurrentLanguage).getResultString().get(0);
        OutputCommand outputCommand1 = Execution.execute(setEnglishLang);
        OutputCommand outputCommand2 = Execution.execute(setEnglishLanguage);

        if (!outputCommand1.getOutputStatus().equals(SUCCESS) || !outputCommand2.getOutputStatus().equals(SUCCESS)) {
            outputCommand1.getResultString().addAll(outputCommand2.getResultString());
            throw new SystemCommandException(
                    StringGetter.getUniqueStingFromList(outputCommand1.getResultString(), '\n')
            );
        }
        return currentLang + " " + currentLanguage;
    }

    @Override
    public void setLangToDefault(String defaultLangPattern) throws SystemCommandException {
        String[] langs = defaultLangPattern.split(" ");
        Command command1 = new Command("export", Collections.singletonList("LANG=" + langs[0]));
        Command command2 = new Command("export", Collections.singletonList("LANGUAGE=" + langs[1]));
        OutputCommand outputCommand1 = Execution.execute(command1);
        OutputCommand outputCommand2 = Execution.execute(command2);

        if (!outputCommand1.getOutputStatus().equals(SUCCESS) || !outputCommand2.getOutputStatus().equals(SUCCESS)) {
            outputCommand1.getResultString().addAll(outputCommand2.getResultString());
            throw new SystemCommandException(
                    StringGetter.getUniqueStingFromList(outputCommand1.getResultString(), '\n')
            );
        }
    }

    @Override
    public boolean getRootAuthorization(String password) {
        Command command = new Command(new Date(), "sudo", Collections.singletonList("-i"));
        OutputCommand o = Execution.executeWithInput(command, password);
        Execution.execute(new Command("whoami", null));
        return false; //provvisorio
    }
}
