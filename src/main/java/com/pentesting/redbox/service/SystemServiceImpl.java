package com.pentesting.redbox.service;

import com.pentesting.redbox.beans.OperativeSystem;
import com.pentesting.redbox.persistence.entities.Command;
import com.pentesting.redbox.persistence.entities.OutputCommand;
import com.pentesting.redbox.utils.ExecutionManager;
import com.pentesting.redbox.utils.exceptions.CommandExitWithErrorException;
import com.pentesting.redbox.utils.exceptions.ProgramNotFoundException;
import com.pentesting.redbox.utils.exceptions.SystemCommandException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Collections;

@Service
public class SystemServiceImpl implements SystemService {

    private static final Logger log = LoggerFactory.getLogger(ExecuteCommandServiceImpl.class);

    @Autowired
    ExecuteCommandService executeCommandService;

    @Override
    public String setLangToEnglish() throws SystemCommandException {
        String currentLang, currentLanguage;
        String englishLang = "en_US.UTF-8";
        String englishLanguage = "en";

        currentLang = ExecutionManager.getEnvironmentVariable("LANG");
        currentLanguage = ExecutionManager.getEnvironmentVariable("LANGUAGE");

        try {
            ExecutionManager.setEnvironmentVariable("LANG", englishLang);
            ExecutionManager.setEnvironmentVariable("LANGUAGE", englishLanguage);
            ExecutionManager.setEnvironmentVariable("GDM_LANG", englishLanguage);
        } catch (Exception e) {
            e.printStackTrace();
            throw new SystemCommandException();
        }

        return currentLang + " " + currentLanguage;
    }

    @Override
    public void setLangToDefault(String defaultLangPattern) throws SystemCommandException {
        String[] langs = defaultLangPattern.split(" ");

        try {
            ExecutionManager.setEnvironmentVariable("LANG", langs[0]);
            ExecutionManager.setEnvironmentVariable("LANGUAGE", langs[1]);
            ExecutionManager.setEnvironmentVariable("GDM_LANG", langs[1]);
        } catch (Exception e) {
            throw new SystemCommandException();
        }
    }

    @Override
    public void changeUser(String user) throws SystemCommandException {
        //...
    }

    @Override
    public OperativeSystem getOperativeSystem() throws SystemCommandException, CommandExitWithErrorException, ProgramNotFoundException {
        String os = System.getProperty("os.name");
        switch (os) {
            case "Windows":
                return new OperativeSystem(os);
            case "MacOS":
                return new OperativeSystem(os);
            case "Linux":
                Command distroCommand = new Command("lsb_release", Collections.singletonList("-a"));
                OutputCommand outputCommand = executeCommandService.execute(distroCommand, 1);
                return OperativeSystem.getInstanceFromOutputLines(outputCommand.getResultString());
        }
        return null;
    }

    @Override
    public OutputCommand getSystemInfo(OperativeSystem os) throws CommandExitWithErrorException, ProgramNotFoundException {
        if (os.getName().matches(".*Windows.*")) {
            //...
        } else if (os.getName().matches(".*MacOS.*")) {
            //...
        } else if (os.getName().matches(".*Linux.*")) {
            return executeCommandService.execute(new Command("lshw", Collections.singletonList("-json")),1);
        }
        return null;
    }


}
