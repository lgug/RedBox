package com.pentesting.redbox.controller;

import com.pentesting.redbox.adapters.OutputAdapter;
import com.pentesting.redbox.beans.OperativeSystem;
import com.pentesting.redbox.persistence.entities.Command;
import com.pentesting.redbox.persistence.entities.OutputCommand;
import com.pentesting.redbox.service.AdaptOutputService;
import com.pentesting.redbox.service.ExecuteCommandService;
import com.pentesting.redbox.service.NetworkManagementService;
import com.pentesting.redbox.service.SystemService;
import com.pentesting.redbox.utils.exceptions.CannotAdaptCommandOutputException;
import com.pentesting.redbox.utils.exceptions.CommandExitWithErrorException;
import com.pentesting.redbox.utils.exceptions.ProgramNotFoundException;
import com.pentesting.redbox.utils.exceptions.SystemCommandException;
import com.subgraph.orchid.TorClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.util.*;

import static org.springframework.http.HttpStatus.BAD_REQUEST;
import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
import static org.springframework.http.HttpStatus.OK;

@CrossOrigin
@RestController
public class RedBoxController {

    @Autowired
    private ExecuteCommandService executeCommandService;

    @Autowired
    private NetworkManagementService networkManagementService;

    @Autowired
    private SystemService systemService;

    @Autowired
    private AdaptOutputService adaptOutputService;

    @RequestMapping(value = "/exec", method = RequestMethod.GET)
    public ResponseEntity<Object> exec(@RequestParam(value = "command") String commandString,
                                       @RequestParam(value = "parameters", required = false) String parameters,
                                       @RequestParam(value = "launch_times", defaultValue = "1") Integer times) {
        Command command = new Command();
        command.setCommand(commandString);
        if (parameters != null) {
            List<String> parametersList = Arrays.asList(parameters.split("__"));
            command.setParameters(parametersList);
        }
        OutputAdapter outputAdapter;
        try {
            OutputCommand outputCommand = executeCommandService.execute(command, times);
            outputAdapter = adaptOutputService.adapt(
                    outputCommand.getResultString(),
                    outputCommand.getCommand().getCommand()
            );
        } catch (ProgramNotFoundException e) {
            return new ResponseEntity<>(e.getMessage(), BAD_REQUEST);
        } catch (CannotAdaptCommandOutputException | CommandExitWithErrorException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_ACCEPTABLE);
        }
        return new ResponseEntity<>(outputAdapter, OK);
    }

    @RequestMapping(value = "/start-tor", method = RequestMethod.GET)
    public ResponseEntity<Object> startTorConnection() {
        TorClient torClient = new TorClient();
        //...
        return new ResponseEntity<>(OK);
    }

    @RequestMapping(value = "/get-ip-address", method = RequestMethod.GET)
    public ResponseEntity<String> getIpAddress(@RequestParam(value = "type", defaultValue = "public") String type) {
        String ip;
        try {
            switch (type) {
                case "public":
                    ip = networkManagementService.getPublicIPAddress();
                    break;
                case "private":
                    ip = networkManagementService.getPrivateIPAddress();
                    break;
                default:
                    throw new IOException();
            }
        } catch (IOException e) {
            return new ResponseEntity<>(INTERNAL_SERVER_ERROR);
        }
        return new ResponseEntity<>(ip, OK);
    }

    @RequestMapping(value = "/get-system-info", method = RequestMethod.GET)
    public ResponseEntity<Object> getSystemInfo() {
        OutputAdapter outputAdapter;
        try {
            //OperativeSystem os = systemService.getOperativeSystem();
            OutputCommand oc = systemService.getSystemInfo(new OperativeSystem("Linux Mint"));
            outputAdapter = adaptOutputService.adapt(oc.getResultString(), oc.getCommand().getCommand());
        } catch (CommandExitWithErrorException | CannotAdaptCommandOutputException | IOException | ProgramNotFoundException e) {
            return new ResponseEntity<>(INTERNAL_SERVER_ERROR);
        }
        return new ResponseEntity<>(outputAdapter, OK);
    }
}
