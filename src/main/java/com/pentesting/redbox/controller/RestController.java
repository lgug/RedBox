package com.pentesting.redbox.controller;


import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.pentesting.redbox.adapters.Generic_OutputAdapter;
import com.pentesting.redbox.adapters.NMAP_OutputAdapter;
import com.pentesting.redbox.adapters.OutputAdapter;
import com.pentesting.redbox.persistence.entities.Command;
import com.pentesting.redbox.persistence.entities.OutputCommand;
import com.pentesting.redbox.service.AdaptOutputService;
import com.pentesting.redbox.service.ExecuteCommandService;
import com.pentesting.redbox.service.SystemService;
import com.pentesting.redbox.utils.exceptions.CannotAdaptCommandOutputException;
import com.pentesting.redbox.utils.exceptions.CommandExitWithErrorException;
import com.pentesting.redbox.utils.exceptions.ProgramNotFoundException;
import com.pentesting.redbox.utils.exceptions.SystemCommandException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.method.annotation.JsonViewResponseBodyAdvice;

import javax.swing.text.html.Option;
import java.util.*;

import static org.springframework.http.HttpStatus.BAD_REQUEST;
import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
import static org.springframework.http.HttpStatus.OK;
import static org.springframework.web.bind.annotation.RequestMethod.GET;

@CrossOrigin
@org.springframework.web.bind.annotation.RestController
public class RestController {

//    @Autowired
//    private SystemService systemService;

    @Autowired
    private ExecuteCommandService executeCommandService;

    @Autowired
    private AdaptOutputService adaptOutputService;

//    @RequestMapping(value = "/installation", method = GET)
//    public ResponseEntity<OutputAdapter> isInstalled(@RequestParam(value = "program") String program) {
//        Command command = new Command(new Date(), program, Collections.singletonList("--help"));
//        try {
//            executeCommandService.execute(command);
//            return new ResponseEntity<>(null, null, OK);
//        } catch (ProgramNotFoundException e1) {
//            return new ResponseEntity<>(null, null, OK);
//        } catch (Exception e2) {
//            return new ResponseEntity<>(null, null, OK);
//        }
//    }

    @RequestMapping(value = "/exec", method = RequestMethod.GET)
    public ResponseEntity<Object> exec(@RequestParam(value = "command") String commandString,
                                       @RequestParam(value = "parameters", required = false) String parameters,
                                       @RequestParam(value = "launch_times", defaultValue = "1") Integer times) {
        Command command = new Command();
        command.setCommand(commandString);
        if (parameters != null) {
            List<String> parametersList = Arrays.asList(parameters.split("__"));
            command.setParameters(parametersList);
        }
        OutputAdapter outputAdapter;
        try {
            OutputCommand outputCommand = executeCommandService.execute(command, times);
            outputAdapter = adaptOutputService.adapt(
                    outputCommand.getResultString(),
                    outputCommand.getCommand().getCommand()
            );
        } catch (ProgramNotFoundException e) {
            return new ResponseEntity<>(e.getMessage(), BAD_REQUEST);
        } catch (CannotAdaptCommandOutputException | CommandExitWithErrorException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_ACCEPTABLE);
        }
        return new ResponseEntity<>(outputAdapter, OK);
    }

//    @RequestMapping(value = "/sudo", method = GET)
//    public ResponseEntity<Boolean> init(@RequestParam(value = "password") String password) {
//        //la password viene criptata lato client e decriptata lato server
//        boolean response = systemService.getRootAuthorization(password);
//        if (response) return new ResponseEntity<>(true, OK);
//        else return new ResponseEntity<>(false, OK);
//    }
}
