package com.pentesting.redbox.controller;


import com.pentesting.redbox.adapters.OutputAdapter;
import com.pentesting.redbox.persistence.entities.Command;
import com.pentesting.redbox.service.ExecuteCommandService;
import com.pentesting.redbox.service.SystemService;
import com.pentesting.redbox.utils.exceptions.ProgramNotFoundException;
import com.pentesting.redbox.utils.exceptions.SystemCommandException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;

import java.util.Collections;
import java.util.Date;
import java.util.List;

import static org.springframework.http.HttpStatus.BAD_REQUEST;
import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
import static org.springframework.http.HttpStatus.OK;
import static org.springframework.web.bind.annotation.RequestMethod.GET;

@org.springframework.web.bind.annotation.RestController
public class RestController {

    @Autowired
    private SystemService systemService;

    @Autowired
    private ExecuteCommandService executeCommandService;

    @RequestMapping(value = "/installation", method = GET)
    public ResponseEntity<OutputAdapter> isInstalled(@RequestParam(value = "program") String program) {
        Command command = new Command(new Date(), program, Collections.singletonList("--help"));
        try {
            executeCommandService.execute(command);
            return new ResponseEntity<>(null, null, OK);
        } catch (ProgramNotFoundException e1) {
            return new ResponseEntity<>(null, null, OK);
        } catch (Exception e2) {
            return new ResponseEntity<>(null, null, OK);
        }
    }

    @RequestMapping(value = "/exec", method = RequestMethod.POST)
    public ResponseEntity<String> exec(@RequestParam(value = "command") String commandString,
                                       @RequestParam(value = "parameters") List<String> parameters) {
        Command command = new Command();
        command.setCommand(commandString);
        command.setParameters(parameters);
        try {
            executeCommandService.execute(command);
        } catch (ProgramNotFoundException e) {
            return new ResponseEntity<>(e.getMessage(), BAD_REQUEST);
        } catch (SystemCommandException e) {
            return new ResponseEntity<>(e.getMessage(), INTERNAL_SERVER_ERROR);
        }
        return new ResponseEntity<>("", OK);
    }

    @RequestMapping(value = "/sudo", method = GET)
    public ResponseEntity<Boolean> init(@RequestParam(value = "password") String password) {
        //la password viene criptata lato client e decriptata lato server
        boolean response = systemService.getRootAuthorization(password);
        if (response) return new ResponseEntity<>(true, OK);
        else return new ResponseEntity<>(false, OK);
    }
}
