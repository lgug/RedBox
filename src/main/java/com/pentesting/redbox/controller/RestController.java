package com.pentesting.redbox.controller;

import com.pentesting.redbox.adapters.OutputAdapter;
import com.pentesting.redbox.persistence.entities.Command;
import com.pentesting.redbox.persistence.entities.OutputCommand;
import com.pentesting.redbox.service.AdaptOutputService;
import com.pentesting.redbox.service.ExecuteCommandService;
import com.pentesting.redbox.utils.exceptions.CannotAdaptCommandOutputException;
import com.pentesting.redbox.utils.exceptions.CommandExitWithErrorException;
import com.pentesting.redbox.utils.exceptions.ProgramNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;

import static org.springframework.http.HttpStatus.BAD_REQUEST;
import static org.springframework.http.HttpStatus.OK;

@CrossOrigin
@org.springframework.web.bind.annotation.RestController
public class RestController {

    @Autowired
    private ExecuteCommandService executeCommandService;

    @Autowired
    private AdaptOutputService adaptOutputService;

    @RequestMapping(value = "/exec", method = RequestMethod.GET)
    public ResponseEntity<Object> exec(@RequestParam(value = "command") String commandString,
                                       @RequestParam(value = "parameters", required = false) String parameters,
                                       @RequestParam(value = "launch_times", defaultValue = "1") Integer times) {
        Command command = new Command();
        command.setCommand(commandString);
        if (parameters != null) {
            List<String> parametersList = Arrays.asList(parameters.split("__"));
            command.setParameters(parametersList);
        }
        OutputAdapter outputAdapter;
        try {
            OutputCommand outputCommand = executeCommandService.execute(command, times);
            outputAdapter = adaptOutputService.adapt(
                    outputCommand.getResultString(),
                    outputCommand.getCommand().getCommand()
            );
        } catch (ProgramNotFoundException e) {
            return new ResponseEntity<>(e.getMessage(), BAD_REQUEST);
        } catch (CannotAdaptCommandOutputException | CommandExitWithErrorException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_ACCEPTABLE);
        }
        return new ResponseEntity<>(outputAdapter, OK);
    }

}
