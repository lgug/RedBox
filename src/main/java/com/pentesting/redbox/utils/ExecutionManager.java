package com.pentesting.redbox.utils;

import com.pentesting.redbox.beans.enums.OutputStatus;
import com.pentesting.redbox.persistence.entities.Command;
import com.pentesting.redbox.persistence.entities.OutputCommand;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.lang.reflect.Field;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;

public class ExecutionManager {

    private static final Logger log = LoggerFactory.getLogger(ExecutionManager.class);

    public static String getEnvironmentVariable(String name) {
        Map<String, String> env = System.getenv();
        return env.get(name);
    }

    public static void setEnvironmentVariable(String name, String value) throws IllegalAccessException, NoSuchFieldException {
        Class[] classes = Collections.class.getDeclaredClasses();
        Map<String, String> env = System.getenv();
        for(Class cl : classes) {
            if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) {
                Field field = cl.getDeclaredField("m");
                field.setAccessible(true);
                Object obj = field.get(env);
                Map<String, String> map = (Map<String, String>) obj;
                map.put(name, value);
            }
        }
    }

    public static OutputCommand execute(Command command) {
        List<String> output = new ArrayList<>();
        List<String> error = new ArrayList<>();

        Process process;
        String[] arrayCommand = null;

        if (command.getCommand().equals("msfconsole")) {
            String commands = command.getParameters().get(command.getParameters().indexOf("-x") + 1);
            try {
                Path path = createFile(Arrays.asList(commands.split(";")), "metasploitfile");
                arrayCommand = new Command("msfconsole", Arrays.asList("-q", "-r", path.toString())).toArray();
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            arrayCommand = command.toArray();
        }

        ProcessBuilder pb = new ProcessBuilder(arrayCommand);
        Map<String, String> env = pb.environment();
        env.put("LANG", "en_US.UTF-8");
        env.put("LANGUAGE", "en");

        try {
            process = pb.start();
            log.info("STARTING COMMAND: " + command.getCommand());
            process.waitFor();

            BufferedReader successBuffer = new BufferedReader(
                    new InputStreamReader(process.getInputStream())
            );
            String s1;
            while ((s1 = successBuffer.readLine()) != null) {
                log.info(s1);
                output.add(s1);
            }

            BufferedReader errorBuffer = new BufferedReader(
                    new InputStreamReader(process.getErrorStream())
            );
            String s2;
            while ((s2 = errorBuffer.readLine()) != null) {
                error.add(s2);
            }

            process.destroy();
        } catch (IOException | InterruptedException e) {
            if (e.getMessage().matches("Cannot run program \".*\": error=2, .*"))
                return new OutputCommand(command, OutputStatus.NOT_FOUND, Collections.singletonList(e.getMessage()));
            else return new OutputCommand(command, OutputStatus.ERROR, Collections.singletonList(e.getMessage()));
        }
        if (error.size() > 0) return new OutputCommand(command, OutputStatus.ERROR, error);
        else return new OutputCommand(command, OutputStatus.SUCCESS, output);
    }

    public static Path createFile(List<String> stringList, String scriptName) throws IOException {
        Path path = Paths.get("src/main/resources/files", scriptName);

        File file = new File(path.toUri());
        file.delete(); //solo a scopo di test
        if (!file.exists()) {
            boolean c = file.createNewFile();
        } else {
            file.delete();
            boolean c = file.createNewFile();
        }
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));
        bufferedWriter.write("db_rebuild_cache\n");
        for (String s: stringList) {
            bufferedWriter.write(s + '\n');
        }
        bufferedWriter.flush();
        bufferedWriter.close();
        return path;
    }

}
