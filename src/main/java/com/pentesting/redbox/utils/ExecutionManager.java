package com.pentesting.redbox.utils;

import com.pentesting.redbox.persistence.entities.Command;
import com.pentesting.redbox.persistence.entities.OutputCommand;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.lang.reflect.Field;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public class ExecutionManager {

    private static final Logger log = LoggerFactory.getLogger(ExecutionManager.class);

    public static String getEnvironmentVariable(String name) {
        Map<String, String> env = System.getenv();
        return env.get(name);
    }

    public static void setEnvironmentVariable(String name, String value) throws IllegalAccessException, NoSuchFieldException {
        Class[] classes = Collections.class.getDeclaredClasses();
        Map<String, String> env = System.getenv();
        for(Class cl : classes) {
            if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) {
                Field field = cl.getDeclaredField("m");
                field.setAccessible(true);
                Object obj = field.get(env);
                Map<String, String> map = (Map<String, String>) obj;
                map.put(name, value);
            }
        }
    }

    public static OutputCommand execute(Command command) {
        List<String> output = new ArrayList<>();
        List<String> error = new ArrayList<>();

        Process process;
        String[] arrayCommand = command.toArray();

        ProcessBuilder pb = new ProcessBuilder(arrayCommand);
        Map<String, String> env = pb.environment();
        env.put("LANG", "en_US.UTF-8");
        env.put("LANGUAGE", "en");

        try {
            process = pb.start();
            log.info("STARTING COMMAND: " + command.getCommand());
            process.waitFor();

            BufferedReader successBuffer = new BufferedReader(
                    new InputStreamReader(process.getInputStream())
            );
            String s1;
            while ((s1 = successBuffer.readLine()) != null) {
                log.info(s1);
                output.add(s1);
            }

            BufferedReader errorBuffer = new BufferedReader(
                    new InputStreamReader(process.getErrorStream())
            );
            String s2;
            while ((s2 = errorBuffer.readLine()) != null) {
                error.add(s2);
            }

            process.destroy();
        } catch (IOException | InterruptedException e) {
            if (e.getMessage().matches("Cannot run program \".*\": error=2, .*"))
                return new OutputCommand(command, OutputStatus.NOT_FOUND, Collections.singletonList(e.getMessage()));
            else return new OutputCommand(command, OutputStatus.ERROR, Collections.singletonList(e.getMessage()));
        }
        if (error.size() > 0) return new OutputCommand(command, OutputStatus.ERROR, error);
        else return new OutputCommand(command, OutputStatus.SUCCESS, output);
    }

    public static Path createScript(List<Command> commandList, String scriptName) throws IOException {
        Path path = Paths.get("src/main/resources/scripts", scriptName + ".sh");

        File file = new File(path.toUri());
        file.delete(); //solo a scopo di test
        if (!file.exists()) {
            if (file.createNewFile()) {
                BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));
                for (Command c : commandList) {
                    bufferedWriter.write(c.getFullCommand() + '\n');
                }
                bufferedWriter.flush();
                bufferedWriter.close();
            } else throw new IOException("Cannot create file.");
        } else throw new IOException("File " + scriptName + ".sh already exists.");
        return path;
    }

    public static void executeScript(Path scriptPath) {
//        Command command = new Command("sh", Collections.singletonList(scriptPath.toString()));
        Command command = new Command("./src/java/resources/scripts/sc.sh", null);
        execute(command);
    }

    public static void sshConnection(Command command) {

    }

}
