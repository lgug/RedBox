package com.pentesting.redbox;

import com.jcraft.jsch.JSchException;
import com.pentesting.redbox.persistence.entities.Command;
import com.pentesting.redbox.persistence.entities.OutputCommand;
import com.pentesting.redbox.service.ExecuteCommandService;
import com.pentesting.redbox.service.SSHConnectionService;
import com.pentesting.redbox.utils.ExecutionManager;
import com.pentesting.redbox.utils.exceptions.ProgramNotFoundException;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.io.IOException;
import java.util.*;

import static com.pentesting.redbox.utils.OutputStatus.ERROR;
import static com.pentesting.redbox.utils.OutputStatus.SUCCESS;

@RunWith(SpringRunner.class)
@SpringBootTest
public class RedboxApplicationTests {

	@Autowired
	private ExecuteCommandService executeCommandService;
	@Autowired
	private SSHConnectionService SSHConnectionService;


	@Test
	public void contextLoads() throws IOException, InterruptedException, JSchException {
		//servicesTest();
		environmentTest();
	}

	/*@SuppressWarnings("ConstantConditions")
	private void servicesTest() throws IOException, InterruptedException, JSchException {

		//ExecuteCommandService
		Command command1 = new Command(new Date(), "echo", Collections.singletonList("this is a test!"));
		Command command2 = new Command(new Date(), "whoami", null);
		Command command3 = new Command(new Date(), "ifconfig", null);
		Command command4 = new Command(new Date(), "nmap", Collections.singletonList("192.168.1.0/24"));

		Assert.assertEquals("this is a test!", executeCommandService.execute(command1).get().getResultString().get(0));
		Assert.assertEquals(executeCommandService.execute(command2).get().getOutputStatus(), SUCCESS);
		Assert.assertTrue(executeCommandService.execute(command3).get().getResultString().size() > 0);
//		Assert.assertEquals(executeCommandService.execute(command4).get().getOutputStatus(), SUCCESS);

		Command nmapCommand = new Command(new Date(), "apt-get", Arrays.asList("install", "nmap"));
//		Assert.assertEquals(executeCommandService.execute(nmapCommand).get().getOutputStatus(), ERROR);

		Command metasploit = new Command(new Date(), "msfconsole", Arrays.asList("-x", "target;exit"));
		OutputCommand outputCommand = ExecutionManager.execute(metasploit);

		//SSHConnectionService
//		SSHConnectionService.openConnection("");
	}*/

	private void environmentTest() {
		String name = ExecutionManager.getEnvironmentVariable("LANG");
		Assert.assertTrue(name.matches(".*"));
	}

}