package com.pentesting.redbox;

import com.jcraft.jsch.JSchException;
import com.pentesting.redbox.persistence.entities.Command;
import com.pentesting.redbox.persistence.entities.OutputCommand;
import com.pentesting.redbox.service.ExecuteCommandService;
import com.pentesting.redbox.service.SSHConnectionService;
import com.pentesting.redbox.utils.ExecutionManager;
import com.pentesting.redbox.utils.exceptions.CommandExitWithErrorException;
import com.pentesting.redbox.utils.exceptions.ProgramNotFoundException;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.io.IOException;
import java.util.*;

import static com.pentesting.redbox.utils.OutputStatus.ERROR;
import static com.pentesting.redbox.utils.OutputStatus.SUCCESS;

@RunWith(SpringRunner.class)
@SpringBootTest
public class RedboxApplicationTests {

	@Autowired
	private ExecuteCommandService executeCommandService;
	@Autowired
	private SSHConnectionService SSHConnectionService;


	@Test
	public void contextLoads() throws IOException, CommandExitWithErrorException {
		servicesTest();
		environmentTest();
	}

	@SuppressWarnings("ConstantConditions")
	private void servicesTest() throws IOException, CommandExitWithErrorException {

//		//ExecuteCommandService
//		Command command1 = new Command(new Date(), "echo", Collections.singletonList("this is a test!"));
//		Command command2 = new Command(new Date(), "whoami", null);
//		Command command3 = new Command(new Date(), "ifconfig", null);
//		Command command4 = new Command(new Date(), "nmap", Collections.singletonList("192.168.1.0/24"));
//
//		Assert.assertEquals("this is a test!", executeCommandService.execute(command1, 1).getResultString().get(0));
//		Assert.assertEquals(executeCommandService.execute(command2, 1).getOutputStatus(), SUCCESS);
//		Assert.assertTrue(executeCommandService.execute(command3, 1).getResultString().size() > 0);
////		Assert.assertEquals(executeCommandService.execute(command4).get().getOutputStatus(), SUCCESS);
//
//		Command nmapCommand = new Command(new Date(), "apt-get", Arrays.asList("install", "nmap"));
////		Assert.assertEquals(executeCommandService.execute(nmapCommand).get().getOutputStatus(), ERROR);
//
//		Command omp = new Command(new Date(), "omp", Arrays.asList(
//				"-h", "localhost", "-p", "9390", "-u", "admin", "-w", "admin", "--get-tasks"
//		));
//		OutputCommand ompOutputCommand = ExecutionManager.execute(omp);

		Command fping = new Command("fping", Arrays.asList("-g", "192.168.1.0/24"));
		OutputCommand mfpingOutputCommand = ExecutionManager.execute(fping);

		Command metasploit = new Command(new Date(), "msfconsole", Arrays.asList(
				"-q", "-x", "search type:exploit platform:linux name:mysql;exit"));
		OutputCommand metasploiOutputCommand = ExecutionManager.execute(metasploit);

		//SSHConnectionService
//		SSHConnectionService.openConnection("");
	}

	private void environmentTest() {
		String name = ExecutionManager.getEnvironmentVariable("LANG");
		Assert.assertTrue(name.matches(".*"));
	}

}